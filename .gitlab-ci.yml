image: docker:19.03.12 

stages: 
  - build 
  - test
  - push 
  - pull
  - deploy

variables: 
  docker_version: "19.03.12"
  CI_REGISTRY: registry.gitlab.com
  REGISTRY_REPO_NAME: estudo-ci
  NAMESPACE: my-application
  FIRST_IMAGE: backend
  SECOND_IMAGE: frontend
  BACK_VERSION: "1.0"
  FRONT_VERSION: "1.0"
  DOCKER_IMAGE: $CI_REGISTRY/$REGISTRY_REPO_NAME/$NAMESPACE

services: 
  - docker:19.03.12-dind

build-my-applications:
  stage: build 
  only:
    - branches 
  except: 
    - main
  script: 
    - docker build -f ./backend/Dockerfile -t $CI_REGISTRY/$REGISTRY_REPO_NAME/$NAMESPACE/$FIRST_IMAGE:0.0 ./backend --target builder
    - docker build -f ./backend/Dockerfile -t $CI_REGISTRY/$REGISTRY_REPO_NAME/$NAMESPACE/$FIRST_IMAGE:$BACK_VERSION ./backend --target backend
    - docker build -f ./frontend/Dockerfile -t $CI_REGISTRY/$REGISTRY_REPO_NAME/$NAMESPACE/$SECOND_IMAGE:$FRONT_VERSION ./frontend 

test-my-applications:
  stage: test
  only:
    - branches 
  except: 
    - main
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script:
    - docker build -f backend/Dockerfile -t $DOCKER_IMAGE/$FIRST_IMAGE:0.0 ./backend --target builder
    - docker build -f backend/Dockerfile -t $DOCKER_IMAGE/$FIRST_IMAGE:$BACK_VERSION ./backend --target backend
    - docker build -f frontend/Dockerfile -t $DOCKER_IMAGE/$SECOND_IMAGE:$FRONT_VERSION ./frontend
    - docker run -d -p 8080:8080 $DOCKER_IMAGE/$FIRST_IMAGE:$BACK_VERSION /usr/bin/curl --silent http://localhost:8080/healthz
    - docker run -d -p 8000:8000 $DOCKER_IMAGE/$SECOND_IMAGE:$FRONT_VERSION /usr/bin/curl --silent http://localhost:8000    
    
push-my-applications:
  stage: push
  only:
    - branches
  except:
    - main
  script:
    - docker build -f backend/Dockerfile -t $DOCKER_IMAGE/$FIRST_IMAGE:0.0 ./backend --target builder
    - docker build -f backend/Dockerfile -t $DOCKER_IMAGE/$FIRST_IMAGE:$BACK_VERSION ./backend --target backend
    - docker build -f frontend/Dockerfile -t $DOCKER_IMAGE/$SECOND_IMAGE:$FRONT_VERSION ./frontend
    - docker login -u $CI_USER_DOCKER -p $CI_TOKEN_DOCKER $CI_REGISTRY
    - docker push $DOCKER_IMAGE/$FIRST_IMAGE:$BACK_VERSION
    - docker push $DOCKER_IMAGE/$SECOND_IMAGE:$FRONT_VERSION 

pull-my-applications: 
  stage: pull 
  only: 
    - main
  script: 
    - docker pull $DOCKER_IMAGE/$FIRST_IMAGE:$BACK_VERSION
    - docker pull $DOCKER_IMAGE/$SECOND_IMAGE:$FRONT_VERSION
    - docker run -d -p 8080:8080 $DOCKER_IMAGE/$FIRST_IMAGE:$BACK_VERSION /usr/bin/curl --silent http://localhost:8080/healthz 
    - docker run -d -p 8000:8000 $DOCKER_IMAGE/$SECOND_IMAGE:$FRONT_VERSION /usr/bin/curl --silent http://localhost:8000    

deploy-my-applications:
  stage: deploy
  image: devth/helm
  environment: dev
  only:
    - branches
  except:
    - main
  script:
     - init_helm 
     - helm install my-application
       --set backend.image="${DOCKER_IMAGE}"/"${FIRST_IMAGE}",version.back="${BACK_VERSION}"
       --set frontend.image="${DOCKER_IMAGE}"/"${SECOND_IMAGE}",version.front="${FRONT_VERSION}"
       ./my-helm

.functions: &functions |
    # Functions
    function init_helm() {
        mkdir -p /etc/deploy
        echo "${GKE_SERVICE_ACCOUNT}" | base64 -d > /etc/deploy/sa.json
        gcloud auth activate-service-account --key-file /etc/deploy/sa.json --project="${GKE_PROJECT}"
        gcloud container clusters get-credentials "${GKE_CLUSTER_NAME}" --zone "${GKE_ZONE}" --project "${GKE_PROJECT}"      
    }

before_script:
- *functions
